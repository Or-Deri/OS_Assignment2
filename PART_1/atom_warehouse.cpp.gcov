        -:    0:Source:atom_warehouse.cpp
        -:    0:Graph:atom_warehouse-atom_warehouse.gcno
        -:    0:Data:atom_warehouse-atom_warehouse.gcda
        -:    0:Runs:1
        -:    0:Source is newer than graph
        -:    1:#include <iostream>
        -:    2:#include <string>
        -:    3:#include <sstream>
        -:    4:#include <unordered_map>
        -:    5:#include <vector>
        -:    6:#include <cstdint>
        -:    7:#include <cstring>
        -:    8:#include <cstdlib>
        -:    9:#include <unistd.h>
        -:   10:#include <arpa/inet.h>
        -:   11:#include <sys/socket.h>
        -:   12:#include <sys/select.h>
        -:   13:#include "../WareHouse/WareHouse.hpp"
        -:   14:#include <signal.h>
        -:   15:
        -:   16:// Maximum line length we expect from a client
        -:   17:static const size_t MAX_LINE = 1024;
        -:   18:
function _Z13handle_siginti called 0 returned 0% blocks executed 0%
    #####:   19:void handle_sigint(int sig)
        -:   20:{
    #####:   21:    std::exit(0);
        -:   22:}
        -:   23:
function main called 1 returned 100% blocks executed 65%
        1:   24:int main(int argc, char *argv[])
        -:   25:{
        -:   26:
        1:   27:    signal(SIGINT, handle_sigint);
call    0 returned 100%
        1:   28:    if (argc != 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   29:    {
    #####:   30:        std::cerr << "Usage: " << argv[0] << " <port>\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####:   31:        std::exit(1);
call    0 never executed
        -:   32:    }
        -:   33:
        -:   34:    // Parse port
        1:   35:    int port = std::stoi(argv[1]);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        1:   36:    if (port <= 0 || port > 65535)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   37:    {
    #####:   38:        std::cerr << "Invalid port number.\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   39:        std::exit(1);
call    0 never executed
        -:   40:    }
        -:   41:
        -:   42:    // 1) Create listening socket
        1:   43:    int listener = socket(AF_INET, SOCK_STREAM, 0);
call    0 returned 100%
        1:   44:    if (listener < 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   45:    {
    #####:   46:        perror("socket");
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   47:        std::exit(1);
call    0 never executed
        -:   48:    }
        -:   49:
        1:   50:    int opt = 1;
        1:   51:    if (setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   52:    {
    #####:   53:        perror("setsockopt");
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   54:        close(listener);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   55:        std::exit(1);
call    0 never executed
        -:   56:    }
        -:   57:
        1:   58:    sockaddr_in addr{};
        1:   59:    addr.sin_family = AF_INET;
        1:   60:    addr.sin_addr.s_addr = INADDR_ANY;
        1:   61:    addr.sin_port = htons(port);
        -:   62:
        1:   63:    if (bind(listener, (sockaddr *)&addr, sizeof(addr)) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   64:    {
    #####:   65:        perror("bind");
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   66:        close(listener);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   67:        std::exit(1);
call    0 never executed
        -:   68:    }
        -:   69:
        1:   70:    if (listen(listener, SOMAXCONN) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   71:    {
    #####:   72:        perror("listen");
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   73:        close(listener);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   74:        std::exit(1);
call    0 never executed
        -:   75:    }
        -:   76:
        1:   77:    std::cout << "Server listening on port " << port << "...\n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
        -:   78:
        -:   79:    //
        -:   80:    // 2) set up select()’s fd_sets
        -:   81:    //
        -:   82:    fd_set master_set;
        -:   83:    fd_set read_set;
       17:   84:    FD_ZERO(&master_set);
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        1:   85:    FD_SET(listener, &master_set);
        1:   86:    int fd_max = listener;
        -:   87:
        1:   88:    FD_SET(STDIN_FILENO, &master_set); // Add stdin for interactive commands
        -:   89:
        1:   90:    if (STDIN_FILENO > fd_max)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   91:    {
    #####:   92:        fd_max = STDIN_FILENO;
        -:   93:    }
        -:   94:
        -:   95:    // Per‐client partial‐line buffers
        -:   96:    //   key = client_fd, value = buffered data not yet parsed into a full line
        1:   97:    std::unordered_map<int, std::string> bufmap;
call    0 returned 100%
        -:   98:
        -:   99:    // Single shared Warehouse instance
        1:  100:    Warehouse warehouse;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  101:
        -:  102:    while (true)
        -:  103:    {
        9:  104:        read_set = master_set;
        9:  105:        if (select(fd_max + 1, &read_set, nullptr, nullptr, nullptr) < 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  106:        {
    #####:  107:            perror("select");
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  108:            break;
        -:  109:        }
        -:  110:
        -:  111:        // 3) Check each fd
       49:  112:        for (int fd = 0; fd <= fd_max; ++fd)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  113:        {
       41:  114:            if (!FD_ISSET(fd, &read_set))
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -:  115:            {
       32:  116:                continue;
        -:  117:            }
        -:  118:
        9:  119:            if (fd == listener)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  120:            {
        -:  121:                // New incoming connection
        1:  122:                int client_fd = accept(listener, nullptr, nullptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       1*:  123:                if (client_fd < 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  124:                {
    #####:  125:                    perror("accept");
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  126:                    continue;
        -:  127:                }
        1:  128:                FD_SET(client_fd, &master_set);
        1:  129:                if (client_fd > fd_max)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  130:                {
        1:  131:                    fd_max = client_fd;
        -:  132:                }
        -:  133:                // Initialize its buffer
        1:  134:                bufmap[client_fd] = "";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  135:            }
        8:  136:
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -:  137:            else
        1:  138:            {
call    0 returned 100%
        1:  139:                // Existing client is readable
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:  140:                char tmpbuf[512];
    #####:  141:                ssize_t nbytes = recv(fd, tmpbuf, sizeof(tmpbuf) - 1, 0);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  142:                if (nbytes <= 0)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  143:                {
        -:  144:                    // Client closed or error
       1*:  145:                    if (nbytes < 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0%
branch 13 taken 100% (fallthrough)
    #####:  146:                    {
call    0 never executed
       1*:  147:                        perror("recv");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
branch  8 never executed (fallthrough)
branch  9 never executed
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
        -:  148:                    }
        1:  149:                    close(fd);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  150:                    FD_CLR(fd, &master_set);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  151:                    bufmap.erase(fd);
        -:  152:                }
    #####:  153:                else
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
       1*:  154:                {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  155:                    // Append to this client's buffer
        -:  156:                    tmpbuf[nbytes] = '\0';
        -:  157:                    bufmap[fd].append(tmpbuf);
        -:  158:
        -:  159:                    // Process complete lines
        7:  160:                    size_t pos;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7:  161:                    while ((pos = bufmap[fd].find('\n')) != std::string::npos)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  162:                    {
        -:  163:                        std::string line = bufmap[fd].substr(0, pos);
        1:  164:                        // Remove the line + newline from buffer
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  165:                        bufmap[fd].erase(0, pos + 1);
    #####:  166:
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  167:                        // Trim any CR if sent by a Windows client
        1:  168:                        if (!line.empty() && line.back() == '\r')
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  169:                        {
        1:  170:                            line.pop_back();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  171:                        }
        -:  172:
        -:  173:                        // Parse: ADD <ATOM> <amount>
        -:  174:                        std::istringstream iss(line);
        6:  175:                        std::string cmd, atom_type;
        6:  176:                        unsigned long long amt;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  177:
        -:  178:                        bool success = false;
        -:  179:                        if ((iss >> cmd >> atom_type >> amt) && cmd == "ADD")
       12:  180:                        {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 50%
branch  5 taken 50% (fallthrough)
        -:  181:
        6:  182:                            if (warehouse.is_valid_atom(atom_type))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  183:                            {
        6:  184:
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  185:                                if (warehouse.add_atom(atom_type, static_cast<unsigned int>(amt)))
        -:  186:                                {
       6*:  187:                                    success = true;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:  188:                                }
    #####:  189:                            }
call    0 never executed
        -:  190:                        }
        -:  191:
        -:  192:                        if (success)
        6:  193:                        {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  194:                            warehouse.print_state();
call    0 returned 100%
call    1 returned 100%
        -:  195:                            const char *resp = "OK\n";
        -:  196:                            send(fd, resp, std::strlen(resp), 0);
        6:  197:                        }
       6*:  198:                        else
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
branch 17 taken 100% (fallthrough)
branch 18 taken 0%
branch 19 taken 100% (fallthrough)
branch 20 taken 0%
        -:  199:                        {
        -:  200:                            warehouse.print_state();
        6:  201:                            const char *resp = "ERROR\n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -:  202:                            send(fd, resp, std::strlen(resp), 0);
        -:  203:                        }
        6:  204:                    }
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 83% (fallthrough)
branch  4 taken 17%
        -:  205:                }
        5:  206:            }
        -:  207:        }
        -:  208:    }
        -:  209:
        -:  210:    // Cleanup
        6:  211:    close(listener);
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        -:  212:    return 0;
        5:  213:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
